<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gbougeard's Blog]]></title>
  <link href="http://gbougeard.github.com/atom.xml" rel="self"/>
  <link href="http://gbougeard.github.com/"/>
  <updated>2014-03-25T22:15:28+01:00</updated>
  <id>http://gbougeard.github.com/</id>
  <author>
    <name><![CDATA[Greg Bougeard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Documenter une API REST grace a RAML]]></title>
    <link href="http://gbougeard.github.com/blog/2014/03/14/documenter-une-api-rest-grace-a-raml/"/>
    <updated>2014-03-14T21:36:00+01:00</updated>
    <id>http://gbougeard.github.com/blog/2014/03/14/documenter-une-api-rest-grace-a-raml</id>
    <content type="html"><![CDATA[<p>Avoir une API REST c&#8217;est cool, avoir une API REST documentée c&#8217;est encore mieux!</p>

<h3>Quelques exemples de documentation d&#8217;API REST</h3>

<ul>
<li><a href="http://developer.ean.com/docs/hotel-list/">Expedia</a> : plain text, pas super pratique</li>
<li><a href="https://dev.twitter.com/docs/api/1.1">Twitter</a> : c&#8217;est déjà mieux</li>
<li><a href="http://developer.marvel.com/docs">Marvel</a> : waouh!</li>
</ul>


<p>A mon humble avis la doc la plus lisible et mieux organisée est celle de l&#8217;API de Marvel.</p>

<p>Elle a été générée grâce à <a href="https://helloreverb.com/developers/swagger">Swagger</a>.
Swagger permet pour une application Java et plus particulièrement une application JAX-RS, de générer cette documentation
et ceci grâce à des annotations ( <a href="https://github.com/kongchen/swagger-maven-example/blob/master/src/main/java/com/foo/bar/api/car/CarResourceV1.java">exemple</a> ).
Il existe aussi un <a href="https://github.com/wordnik/swagger-core/tree/master/modules/swagger-play2">module Swagger pour Play2</a> qui utilise lui aussi des annotations.</p>

<p>C&#8217;est bien sympa tout ca, ca génère tout tout seul mais c&#8217;est tout de même super intrusif et ca &#8220;pollue&#8221; quelque peu notre code.
Il y a presque plus d&#8217;annotations Swagger que de code&#8230;</p>

<h2>RAML</h2>

<p><a href="http://www.raml.org">RAML</a> ou RESTful API Modeling Language, est une initiative de <a href="http://www.mulesoft.com">Mulesoft</a> mais pas <a href="http://raml.org/about.html#six">que</a>.
L&#8217;idée de RAML ce n&#8217;est pas de générer de la doc à partir de code existant mais de définir un language de description d&#8217;APIs REST.
Il se base sur <a href="http://www.yaml.org">YAML</a> et a donc sa propre <a href="http://raml.org/spec.html">specification</a>.</p>

<p>RAML.org fournit différents <a href="http://raml.org/projects.html">outils</a> open source :</p>

<h3>API Designer</h3>

<p>Un editeur développé en AngularJS permettant de créer des fichiers RAML. L&#8217;éditeur a la coloration syntaxique, l&#8217;auto-complétion ainsi que la vérification de la syntaxe RAML.
En attenant un plugin équivalent pour votre IDE préféré, cela reste le meilleur outil pour éditer un fichier RAML.
Il utilise lui même l&#8217;API Console pour faire la prévisualisation des fichiers édités.
Pour l&#8217;utiliser localement, il suffit de cloner le <a href="https://github.com/mulesoft/api-designer">repo github</a> puis de lancer l&#8217;application grâce à grunt.
Personnellement je préfère utiliser <a href="http://api-portal.anypoint.mulesoft.com/raml/api-designer">l&#8217;éditeur en ligne</a> car en local je n&#8217;ai pas trouvé comment persister les fichiers :)</p>

<h3>API Console</h3>

<p>Une directive AngularJS permettant de faire un rendu web d&#8217;un fichier RAML donné.</p>

<h3>JAX-RS Codegen</h3>

<p>Un générateur d&#8217;application JAX-RS a partir d&#8217;un fichier RAML.</p>

<h3>Un exemple concret</h3>

<p>Afin de se rendre bien compte de la syntaxe et des possibilités offertes par RAML, voilà un exemple concret de <a href="http://api-portal.anypoint.mulesoft.com/github/api/github-api-v3/docs/raml">doc générée pour l&#8217;API de Github</a> et le <a href="http://api-portal.anypoint.mulesoft.com/github/api/github-api-v3/github-api-v3.raml">fichier RAML source</a>.</p>

<p>RAML permet de définir des traits, des type de resources (dans l&#8217;exemple de l&#8217;API Github il y a par exemple le resourceType <em>item</em> pour les URI vers une ressource unique et <em>collection</em> pour les listes)
ce qui permet d&#8217;éviter de se répéter mais aussi de bien catégoriser et organiser ses ressources.</p>

<p>Pour les réponses, on peut spécifier directement dans le fichier RAML la structure d&#8217;un objet json au format json-schema dans le cadre d&#8217;une réponse de type application/json mais on peut aussi
inclure (gradce à la syntaxe !include:myfile ) un fichier json ou une xsd (pour une réponse de type application/xml). La même chose est possible pour les exemples de réponses.
Ce qu&#8217;il faut savoir avec les exemples, c&#8217;est qu&#8217;ils vont être les valeurs par défaut dans l&#8217;onglet <em>Try it</em>.</p>

<p>On pourrait alors imaginer, dans le cas où l&#8217;ont veut documenter une application existante (je rappelle que l&#8217;idée de base de RAML c&#8217;est de décrire d&#8217;abord l&#8217;API puis de générer le code à partir de cette spec),
pour une application Play2 Scala, un plugin SBT permettant de générer des fichiers json décrivant au format json-schema tous les Readers/Writers définis dans l&#8217;application.
Ca serait toujours plus pratique que devoir les écrire &#8220;à la main&#8221;.</p>

<h2>Conclusion</h2>

<p>REST API Designer est un métier d&#8217;avenir. Bien construire une API REST n&#8217;est pas forcément évident (cf <a href="https://groups.google.com/forum/#!topic/lescastcodeurs/Fjk7L9P3Jsg">ce thread</a>).
Des outils comme ceux que proposent RAML (en particulier l&#8217;API Designer et l&#8217;API Console) me semblent plus qu&#8217;adaptés pour tous ceux qui doivent créer une API REST ou documenter une existante.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxxfr et Jenkins User Conference]]></title>
    <link href="http://gbougeard.github.com/blog/2012/05/01/juc-devoxxfr/"/>
    <updated>2012-05-01T00:00:00+02:00</updated>
    <id>http://gbougeard.github.com/blog/2012/05/01/juc-devoxxfr</id>
    <content type="html"><![CDATA[<h2>et dire qu&#8217;il y a deux ans je ne savais pas ce qu&#8217;était un JUG&#8230;</h2>

<p>Avant de rentrer dans le vif du sujet et de faire un long compte-rendu de mes toutes premières conférences, je suis
obligé de parler un peu de mon parcours. <br/>
J&#8217;ai fait mes premiers en Java en 1998 à l&#8217;IUT info de Montpellier. J&#8217;ai mis 10 ans avant d&#8217;en refaire. <br/>
Entre temps, j&#8217;ai commencé ma vie professionnelle en 2001 à Paris avec du client lourd windows (C++, MFC), des bases Oracle,
puis du PL/SQL. Après 4 ans, retour en province à Toulouse avec une étiquette &#8220;développeur PL/SQL&#8221; (dur à s&#8217;en défaire
quand on est dans une grosse SSII). Après donc 3 ans à ronger mon frein, à découvrir ExtJS, à s&#8217;initier au web avec un peu de PHP,
je retrouve enfin Java et plus partculièrement GWT. Il y a maintenant presque 2 ans, je débarque en région PACA, à Aubagne (connue
mondialement pour ses santons, Marcel Pagnol et sa légion). <br/>
Autant dire que je ne croulais pas trop sous le travail et me taper 100 bornes par jour (les SSII sont concentrées du coté d&#8217;Aix)
pour rien faire, j&#8217;occupe mon temps à faire de la veille. Je découvre alors <a href="http://lescastcodeurs.com/">les castcodeurs</a>, ce qu&#8217;est un JUG et qu&#8217;en fait
une énorme communauté Java existe. Je plonge dans le livre d&#8217;<a href="https://twitter.com/#!/agoncal">Antonio</a> et tombe amoureux de Java EE 6, délaisse GXT pour JSF2
et en particulier Primefaces. <br/>
On essaye de m&#8217;occuper en me demandant pour une avant-vente de me renseigner sur l&#8217;intégration continue. Je tombe des nues.
Mais pourquoi on en a jamais fait sur mes anciens projets?! On aurait peut-etre pas consommé le double que prévu! <br/>
Bref, je me rends compte que dans ces fameuses grosses boites, personne ne sait ce qu&#8217;est qu&#8217;un JUG, ne fait vraiment de veille&#8230;
A cela on m&#8217;annonce que l&#8217;agence veut se focaliser sur Sharepoint et Cobol&#8230; je décide de changer d&#8217;air. <br/>
Depuis maintenant presqu&#8217;un an je suis dans une petite structure (&lt; 50 personnes). A la base &#8220;Référent SQL&#8221;, je suis plutôt
&#8220;Integration manager&#8221;. J&#8217;ai fait une migration de CVS vers Git, mis en place Jenkins pour faire de l&#8217;intégration continue (plus de 300
jobs créés), &#8230; <br/>
Et je vais régulièrement au MarsJug, je ne loupe quasiment aucune session.</p>

<p>Donc quand j&#8217;ai vu les annonces conjuguées de DevoxxFr et de la Jenkins User Conference à Paris, il m&#8217;a semblé évident qu&#8217;il fallait
que j&#8217;y aille. C&#8217;était dans la continuité de mon évolution professionnelle commencée il y a maintenant 2 ans. <br/>
Je pense que si j&#8217;étais resté dans la grosse boite je n&#8217;aurais jamais pu y aller.</p>

<p>Attaquons donc le vif du sujet et mon compte-rendu des deux premières conférences de ma vie.</p>

<h2>Jenkins User Conference</h2>

<h3>Premier jour soft au Mariott.</h3>

<p>Pendant que l&#8217;équipe de DevoxxFr s&#8217;attèle aux derniers préparatifs au rez-de-chaussée, la JUC se tient au sous-sol. Je n&#8217;ai pas les chiffres
exacts mais selon Nicolas de Loof il devait y avoir une grosse centaine de participants.
La conf est résolument plus internationale que DevoxxFr puisque, si je ne me trompe, c&#8217;est la première JUC européenne. Il y
a donc des partipants venus d&#8217;Angletterre, Allemagne, Hollande, &#8230; <br/>
Après une rapide introduction de <a href="https://twitter.com/#!/sachalabourey">Sacha Labourey</a>, <a href="https://twitter.com/#!/kohsukekawa">KK</a>, le créateur de Jenkins, fait une courte keynote retraçant l&#8217;histoire de son bébé. <br/>
A partir de là, les sessions auront lieu dans deux salles en parallèle. <br/>
Voilà le résumé de mon programme :</p>

<h3>Better Build Pipeline  : introducing Build-Flow plugin</h3>

<p>par <a href="https://twitter.com/#!/ndeloof">Nicolas de Loof</a> et <a href="https://twitter.com/#!/trevorreznik">Matthieu Ancelin</a> <br/>
J&#8217;ai découvert Nicolas à ma première session au MarsJug. A l&#8217;époque il baignait dans GWT et pas encore dans Jenkins. <br/>
J&#8217;utilise le Build Pipeline plugin sur mes 3 Jenkins, il me permet de me servir de Jenkins plus comme un ordonnanceur
à la Dollar Universe plus qu&#8217;un simple serveur de build. J&#8217;ai ainsi un pipeline de mise en production qui permet de suivre
la déploiement sur une vingtaine de serveurs. <br/>
L&#8217;idée originale de Nicolas, il me semble, était de fusionner le Join plugin et le Build Pipeline plugin. Au final il
s&#8217;est carrément emballé et est allé jusqu&#8217;à créer un DSL pour représenter des workflows. Le plugin est prometteur.
Un gros chantier est la représentation graphique (l&#8217;interêt principal du Build Pipeline plugin) qui reste à faire. Et
vu le nombre de questions à la fin de la présentation, ce plugin a un bel avenir devant lui!</p>

<h3>Native Package Build Factory Powered by Jenkins</h3>

<p>par <a href="https://twitter.com/#!/hgomez">Henri Gomez</a> <br/>
J&#8217;ai aussi découvert Henri au MarsJug. Il m&#8217;a donné de précieux conseils pour la mise en place de jenkins. <br/>
Henri a été un peu pris de court, il avait préparé sont talk en français et a du le faire en anglais au dernier moment. <br/>
Henri présente les avantages du packaging natif (c&#8217;est son coté Ops). Avec le Matrix Job plugin, il montre comment créer des RPMS par plateforme/architecture.
Dans son talk du lendemain avec les 4 autres mercenaires, tout ceci sera mis en application.</p>

<h3>Advanced Continuous Deployment with Jenkins</h3>

<p>par Benoit Moussaud <br/>
Benoit de Xebia Labs présente Deploy-IT, un outil maison qui permet de déployer par drag&#8217;n&#8217;drop des livrables sur des serveurs.
J&#8217;avoue que j&#8217;ai été un peu déçu. Pas par l&#8217;outil, mais je m&#8221;attendais plus à un talk sur des best practices de
continuous deployment qu&#8217;à une présentation technico-commerciale d&#8217;un produit.</p>

<h3>Tycho, Jenkins &amp; Sonar : the Eclipse Build Dream Team</h3>

<p>par Xavier Seignard et Mickael Istria <br/>
Vu que c&#8217;était sur l&#8217;utilisation de Jenkins lors du développement de plugin Eclipse, ce n&#8217;était pas trop pour moi.</p>

<h3>Clearcase UCM plugin</h3>

<p>par Jens Brejner <br/>
Alors je n&#8217;ai jamais utilisé Clearcase, mais ce talk a eu un franc succès en abordant un sujet interessant : la notion de <a href="https://wiki.jenkins-ci.org/display/JENKINS/Designing+pre-tested+commit">pre-tested commit</a>.</p>

<h3>Jenkins at Nuxeo</h3>

<p>par Julien Carsique <br/>
Une présentation 101 pour ceux qui n&#8217;utilisent pas encore Jenkins.</p>

<h3>Integrating PHP Projects with Jenkins</h3>

<p>par Sebastian Bergmann <br/>
Autant le dire franchement, le pauvre Sebastian n&#8217;a pas vraiment eu de public. Dans la grande salle il n&#8217;y avait à peine
10 personnes qui étaient intéressées par l&#8217;intégration continue de projets PHP. <br/>
Personnellement j&#8217;ai une partie PHP à gérer et j&#8217;ai essayé, en vain, de faire un job Jenkins qui déclencherait une analyse statique de code
et un reporting dans Sonar. Faut dire que j&#8217;ai opté pour une solution proposée dans le wiki du plugin PHP de Sonar : <br/>
créer un projet maven et y mettre les sources PHP. <br/>
Le talk de Sebastian reprend ce qui est dit sur son site jenkins-php et présente les différents outils propres à PHP (PHPUnit, PHPmd, &#8230;).</p>

<h3>Conclusion</h3>

<p>Je m&#8217;attendais à des talks un peu plus poussés, en même temps mon choix n&#8217;était peut-etre pas le bon. J&#8217;aurais peut-etre du aller
voir Grégory Boissinot et son talk How to develop a Jenkins plugin, ou les quickies sur Jenkins chez Apache par Olivier Lamy,
la présentation du Template Plugin, &#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drag and Drop avec Primefaces]]></title>
    <link href="http://gbougeard.github.com/blog/2011/09/05/drag-an-drop-avec-primefaces/"/>
    <updated>2011-09-05T00:00:00+02:00</updated>
    <id>http://gbougeard.github.com/blog/2011/09/05/drag-an-drop-avec-primefaces</id>
    <content type="html"><![CDATA[<h2>ou comment créer un éditeur de formation de football</h2>

<p>Depuis début 2011 je me suis mis à JSF2, si décrié par certain, et j&#8217;ai découvert <a href="http://www.primefaces.org">Primefaces</a>.
J&#8217;ai rapidement accroché car tout simplement je l&#8217;ai trouvé plus joli que les cadors du marchés (RichFaces, IceFaces, ..)
et puis aussi parce que les exemples du <a href="http://www.primefaces.org/showcase-labs/ui/">showcase de Primefaces</a> m&#8217;ont beaucoup
interessé puisqu&#8217;ils sont souvent basés sur des données liées au  joueurs du FC Barcelone. Et vu que mon projet est lié au foot,
j&#8217;ai de suite eu des idées sur comment mettre en oeuvre</p>

<p>J&#8217;utilise la version de développement de Primefaces (3.0-RC1-SNAPSHOT à ce jour) et la version finale (3.0) est prévue pour très bientôt.
Mon environnement de développement est très standard : Netbeans 7, Glassfish 3.1.1, le tout sous linux. Coté base de données, après
avoir tetsé du Derby j&#8217;utilise aussi MySql.</p>

<p>Rentrons dans le vif du sujet : le but est de créer un composant (bien que ce ne va pas être un composant JSF à proprement parler)
qui permettra de définir la position de joueurs afin de définir un schéma de jeu (les fameux 4-4-2, 4-3-3 que connaissent les footeux).</p>

<p>Pour cela j&#8217;ai défini 2 entités que l&#8217;on va persister (je ne vais pas m&#8217;attarder sur la partie JPA2-EJB3 dans cette article) :
La première; Formation, représente une formation (ou schéma tactique) :</p>

<script src="https://gist.github.com/2568180.js"> </script>


<p>La deuxième entité, FormationItem, représentera les différents postes d&#8217;une formation :</p>

<script src="https://gist.github.com/2568203.js"> </script>


<p>Passons aux choses sérieuses coté JSF. L&#8217;idée va être de positionner les différentes FormationItem selon une grille, c&#8217;est à ça
que sert la propriété FamFormation.coord, à représenter la case de la grille sur laquelle le FormationItem.numItem es positionné.</p>

<p>On ne va pas persister cette grille mais par contre on va avoir besoin d&#8217;un petit JSF Bean pour nous aider à faire cette représentation :</p>

<script src="https://gist.github.com/2568216.js"> </script>


<p>Ce bean va représenter chaque case de la grille que l&#8217;on va créer. Chaque case à un index et potentiellement un FormationItem.</p>

<p>Il ne reste plus qu&#8217;à créer un Controller et une page JSF.</p>

<p>Dans le controller on va avoir besoin de :</p>

<script src="https://gist.github.com/2568226.js"> </script>


<p>Coté JSF, on va utiliser le composant DataGrid de PrimeFaces. Il permet d&#8217;afficher les données d&#8217;une ArrayList sur différentes colonnes,
de paginer ou pas cette ArrayList, &#8230; bref, il va nous permettre d&#8217;afficher notre grille.
Personnellement j&#8217;ai choisi une grille de 5*6 soit 30 cases. Mais on pourrait très bien affiner le positionnement des FormationItem
en augmentant le nombre de cases.
A l&#8217;affichage de notre page, il faut donc avoir construit une ArrayList de 30 CanvasFormationItem.</p>

<script src="https://gist.github.com/2568230.js"> </script>


<p>Basculons coté Web :
On va avoir besoin d&#8217;une petite fonction javascript (toute petite et c&#8217;est la seule).</p>

<script src="https://gist.github.com/2568236.js"> </script>


<p>D&#8217;abord un petit formulaire pour la Formation</p>

<script src="https://gist.github.com/2568243.js"> </script>


<p>et maintenant la fameuse DataGrid :</p>

<script src="https://gist.github.com/2568253.js"> </script>


<p>On a rajouté un listener sur l&#8217;action onDrop, il faut donc le coder dans le Controller.
On va gérer les modifications de coords sur les FormationItem dans ce listener.
Puis en rafraichissant la DataGrid, ca sera automatiquement pris en compte.</p>

<script src="https://gist.github.com/2568258.js"> </script>


<p>Et voilà!
<img src="http://gbougeard.github.com/images/formation.png" alt="une petite capture d'écran du résultat" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geekerie ...]]></title>
    <link href="http://gbougeard.github.com/blog/2011/07/27/premier-post/"/>
    <updated>2011-07-27T00:00:00+02:00</updated>
    <id>http://gbougeard.github.com/blog/2011/07/27/premier-post</id>
    <content type="html"><![CDATA[<h2>mon blog sous github</h2>

<p>Voil&agrave;, j&#8217;ai suivi cet <a href="http://k33g.github.com/2011/07/26/JEKILL-ON-GITHUB.html">excellent tutorial</a> et j&#8217;ai donc cr&eacute;&eacute; mon blog sous github comme tout bon geek qui se respecte :D</p>
]]></content>
  </entry>
  
</feed>
